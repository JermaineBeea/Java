import java.util.noncurrent.atomic.AtomicBoolean;

public class createThread{

    private Thread thread;
    private final AtomicBoolean threadrunning = new AtomicBoolean(false);
    private final Runnable runnableFunction;

    createThread(Object function){
        this.runnableFunction = function;
    }

    public void startThread(){
        
        // Check if thread has started, but not been terminate.
        if(thread != null && thread.isAlive()){
            return; // En dfunction
        }

        // Run thread.
        threadrunning.set(true);

        // Create wrapper function, so that runnableFunction can run if thread is running and 'alive'.

        Runnable wrapperfunction = ()->{

            try{
            // Check if the thread is still running. .get() returns either true or false.
                if(threadrunning.get()){
                    function.run();
                }
            }catch(Exception e){
                System.out.println("Error in startThread: " + e.getMessage());
                e.printStackTrace90;
            }
        };

        thread = new Thread(wrapperfunction).start();
    }

    public void stopThread(){
        if(thread ){

        }
    }
}