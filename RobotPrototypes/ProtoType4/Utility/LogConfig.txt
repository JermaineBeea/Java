package Practice;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Configuration class for managing loggers with class-specific settings.
 */
public class LogConfig {

    private final String className;
    private final Logger logger;
    
    // Global defaults
    private static Level GLOBAL_LEVEL = Level.INFO; // Changed from OFF to INFO for better default visibility
    private static boolean GLOBAL_ENABLE_PRINT_STACK = false;
    
    // Using HashMap instead of immutable Map.of() to allow dynamic configuration
    private static final Map<String, Level> classConfigs = new HashMap<>();
    
    static {
        // Initialize with default configurations
        classConfigs.put("Practice.Class1", GLOBAL_LEVEL);
        classConfigs.put("Practice.Class2", GLOBAL_LEVEL);
    }
    
    /**
     * Creates a LogConfig instance for the specified class.
     * 
     * @param className The fully qualified class name
     */
    public LogConfig(String className) {
        this.className = className;
        this.logger = Logger.getLogger(className);
        this.logger.setLevel(getConfig());
    }
    
    /**
     * Gets the log level configuration for this class.
     * If no specific configuration exists, returns the global level.
     * 
     * @return The configured logging level
     */
    private Level getConfig() {
        return classConfigs.getOrDefault(className, GLOBAL_LEVEL);
    }
    
    /**
     * Returns the logger instance.
     * 
     * @return The configured logger
     */
    public Logger getLogger() {
        return logger;
    }
    
    /**
     * Returns the logger instance with a temporary level override.
     * 
     * @param level The temporary logging level
     * @return The configured logger
     */
    public Logger getLogger(Level level) {
        logger.setLevel(level);
        return logger;
    }
    
    /**
     * Prints the stack trace for an exception if enabled globally.
     * 
     * @param exception The exception to print
     */
    public void printStack(Exception exception) {
        printStack(exception, GLOBAL_ENABLE_PRINT_STACK);
    }
    
    /**
     * Prints the stack trace for an exception.
     * 
     * @param exception The exception to print
     * @param enable Whether to print the stack trace
     */
    public void printStack(Exception exception, boolean enable) {
        if (enable) {
            exception.printStackTrace();
        }
    }
    
    /**
     * Sets the global logging level for all classes that don't have a specific override.
     * 
     * @param level The new global logging level
     */
    public static void setGlobalLevel(Level level) {
        GLOBAL_LEVEL = level;
    }
    
    /**
     * Sets the global stack trace printing flag.
     * 
     * @param enable Whether to print stack traces by default
     */
    public static void setGlobalStackTracePrinting(boolean enable) {
        GLOBAL_ENABLE_PRINT_STACK = enable;
    }
    
    /**
     * Configures a specific class's logging level.
     * 
     * @param className The fully qualified class name
     * @param level The logging level for the class
     */
    public static void configureClass(String className, Level level) {
        classConfigs.put(className, level);
    }
    
    /**
     * Resets all configurations to default values.
     */
    public static void resetAllConfigurations() {
        GLOBAL_LEVEL = Level.INFO;
        GLOBAL_ENABLE_PRINT_STACK = false;
        classConfigs.clear();
    }
}