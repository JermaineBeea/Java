import java.util.concurrent.atomic.AtomicBoolean;

/**
* Creates a new thread, which exutes a runnable during thread run.
* @param thread Thread to be created. Default is null.
* @param threadRunning Boolean that sets if thread is running(true), or not-running(false);
* @param threadRunnable Runnable function that executes during thread run.
*/
public class CreateThread{
    private Thread thread;
    private final AtomicBoolean threadRunning = new AtomicBoolean(false);
    private final Runnable threadRunnable;

    /**
    * Initialises the threadRunnable with function.
    * Executes the creation of wrapper function.
    * @param function Function executed, during thread run.
    */
    public CreateThread(Runnable function){
        this.threadRunnable = function;
        createWrapper();
    }

    /**
    * Creates a Runnable function that encapsulates the threadRunnable.
    * Ensures threadRunnable runs, if thread is running.
    * Handles NullPointer and Interrupted exception.
    * Resets the 'threadRunning' to false, ir error is caught.
    * @throws Exception.
    */
    public void createWrapper(){
        Runnable wrapperFunction = ()-> {
            try{
                if(threadRunning.get()){
                    threadRunnable.run();
                }
            }catch(Exception e){
                System.out.println("Error executing thread runnable; " + e.getMessage());
            }finally{
                threadRunning.set(false);
            }
        };
    }

    /**
    * Creates a new thread.
    * Starts thread only if, thread has not been started(is alive);
    * Catches NullPointer and Starts thread.
    * @throws NullPointerException.
    * @throws InterruptedException.
    */
    public void startThread(){
        try{
            if(thread.isAlive()){
                return;
            }
        }catch(NullPointerException e){
            // Continue if thread is null.
        }

        // Run the thread.
        threadRunning.set(true);

        thread = new Thread(threadRunnable);
        thread.start();
    }

    /**
    * Stops thread, if thread is not null.
    * @throws NullPointerException;
    */
    public void stopThread(){
        try{
            threadRunning.set(false);
            thread.interrupt();
        }catch(NullPointerException e){
            System.out.println("Initialise the thread first with startThread.(): " + e.getMessage());
        }catch(Exception ex){
            System.out.println("Error stipoing thread: " + ex.getMessage());
        }
    }
}