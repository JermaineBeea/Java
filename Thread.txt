import java.concurrent.atomic.AtomicBoolean;

/**
* Creates a new thread, with a runnable function, to be executed within the thread.
*/
public class Thread{
    private Thread thread; // Default of thread object is null
    private final AtomicBoolean isRunning = new AtomicBoolean(false);
    private final Runnable threadFunction; // Function to be executed.
    private final Runnable wrapperFunction; // Function that encapsulates the thread function.

    /**
    * Initialises the thread manager with the function to be run in thread.
    * @param function Function to be executed in thread.
    */
    public Thread(Runnable function){
        this.threadFunction = function;
        this.wrapperFunction = createWrapper();
    }

    private Runnable createWrapper(){
        return ()-> {
            try{
                while(isRunning.get()){
                    threadFunction.run();
                }catch(Exception e){
                    System.err.println("Error in runnig thread function: " + e.getMessage());
                }

                if(Thread.currentThread().isInterrupted()){
                    break;
                }
            }finally{
                isRunning.set(false);
            }
        };
    }

    /**
    * Starts the thread, if one isn't already running.
    */
    public void startThread(){
        if(thread != null && thread.isAlive()){
            break;
        }

        isRunning.set(true);

        thtead = new threa(wrapperFunction);
        thread.start();
    }
}